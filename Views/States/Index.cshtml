@model  List<NabzeArz.Models.Report>
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <script src="/Scripts/jquery-1.10.2.min.js"></script>
    <script src="/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="/signalr/hubs"></script>
    <link rel="stylesheet" href="https://cdn.linearicons.com/free/1.0.0/icon-font.min.css">
    <link rel="stylesheet" href="~/Content/CSS/counter.css">


</head>
<body>
    <div class="block-wrapper">
        <div class="block">
            <p><span class="lnr lnr-heart"></span></p>
            <p class="counter-wrapper"><span class="fb"></span></p>
            <p class="text-block">like</p>
        </div>
        <div class="block">
            <p><span class="lnr lnr-code"></span></p>
            <p class="counter-wrapper"><span class="code"></span></p>
            <p class="text-block">totall request</p>
        </div>
        <div class="block">
            <p><span class="lnr lnr-bicycle"></span></p>
            <p class="counter-wrapper"><span class="bike"></span></p>
            <p class="text-block">bicycle</p>
        </div>
        <div class="block">
            <p><span class="lnr lnr-history"></span></p>
            <p class="counter-wrapper"><span class="coffee"></span></p>
            <p class="text-block">coffee</p>
        </div>
    </div>
    <div class="container">
        <div>
            request : <span id="counter"></span>
        </div>
        <div>
            last command : <span id="lastCommand"></span>
        </div>
        <input type="text" list="StaticsList" />
        <datalist id="StaticsList"> 
           
        </datalist>

        @*<div id="canvas-holder" style="width:50%">
            <canvas id="chart-area"></canvas>
        </div>*@
    </div>


    @*<script src="/Scripts/Chart.js-2.7.1/dist/Chart.bundle.min.js"></script>
    <script src="/Scripts/Chart.js-2.7.1/samples/utils.js"></script>*@

    <script>
        $(function () {

            var states = $.connection.statesHub;

            $.connection.hub.start().done(function () {
                //states.server.pushStates("");
                states.server.pushStates("");
                states.server.updateChart();
            });

            //for client
            states.client.getCount = function (states) {
                debugger;
                //$("#counter").text(states.count);
                //$("#lastCommand").text(states.message);
                //window.myPolarArea.data.datasets[0].data[2] = 500;
                //window.myPolarArea.update();
                //removeData();
                //myPolarArea.reset();
                //addData(config, ["یک", "دو"], [10, 30]);
            }
            let options = "";
            let start = 0;

            states.client.getStates = function (reports) {
                let countToEnd = 0;
                debugger;
                console.log(reports);
                $.each(reports, function (index, value) {
                    options += `<option value="${value.key} : ${value.count} - ${value.requestType}"></option>`;
                    countToEnd += value.count;
                    
                });
                $("#StaticsList").find("option").remove();
                //append options to list 
                $('.code').animationCounter({
                    start: start,
                    end: countToEnd,
                    step: 4,
                    delay: 100
                });
                start = countToEnd;
                $("#StaticsList").append(options); 
            }

        })



        //function removeData() {
        //    config.data.labels.pop(); // remove the label first
        //    config.data.datasets.forEach(function (dataset) {
        //        dataset.backgroundColor.pop();
        //        dataset.data.pop();
        //    });
        //    window.myPolarArea.update();
        //}
    </script>

    <script src="~/Scripts/animationCounter.js" charset="utf-8"></script>
    <script type="text/javascript">
        $('#counter-block').ready(function () {
            //$('.fb').animationCounter({
            //    start: 0,
            //    step: 1,
            //    delay: 100
            //});
            //$('.bike').animationCounter({
            //    start: 245677,
            //    step: 100,
            //    delay: 2000,
            //    txt: ' km'
            //});
            //$('.code').animationCounter({
            //    start: 0,
            //    end: 570,
            //    step: 4,
            //    delay: 1000
            //});
            //$('.coffee').animationCounter({
            //    start: 490,
            //    end: 1560,
            //    step: 20,
            //    delay: 900,
            //    txt: ' cl'
            //});
        });
    </script>

    @*<script>
      @{ 
          var counter = Model.Select(m => m.count).ToList();
          var labels = Model.Select(m => m.key).ToList();
      }
        var data = [];
        var labels = [];

        @foreach (var c in counter)
        {
            @:data.push("@c");
        }
        @foreach(var l in labels)
        {
            @:labels.push("@l");
        }
        console.log(data);


        var chartColors = window.chartColors;
        var color = Chart.helpers.color;
        var config = {
            data: {
                datasets: [{
                    data: data ,
                    backgroundColor: [
                        color(chartColors.red).alpha(0.5).rgbString(),
                        color(chartColors.orange).alpha(0.5).rgbString(),
                        color(chartColors.yellow).alpha(0.5).rgbString(),
                        color(chartColors.green).alpha(0.5).rgbString(),
                        color(chartColors.blue).alpha(0.5).rgbString(),
                    ],
                    label: 'My dataset' // for legend
                }],
                labels: labels
            },
            options: {
                responsive: true,
                legend: {
                    position: 'right',
                },
                title: {
                    display: true,
                    text: 'Chart.js Polar Area Chart'
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    },
                    reverse: false
                },
                animation: {
                    animateRotate: false,
                    animateScale: true
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById("chart-area");
            window.myPolarArea = Chart.PolarArea(ctx, config);
        };

        document.getElementById('randomizeData').addEventListener('click', function () {
            config.data.datasets.forEach(function (piece, i) {
                piece.data.forEach(function (value, j) {
                    config.data.datasets[i].data[j] = randomScalingFactor();
                });
            });
            window.myPolarArea.update();
        });

        var colorNames = Object.keys(window.chartColors);
        document.getElementById('addData').addEventListener('click', function () {
            if (config.data.datasets.length > 0) {
                config.data.labels.push('data #' + config.data.labels.length);
                config.data.datasets.forEach(function (dataset) {
                    var colorName = colorNames[config.data.labels.length % colorNames.length];
                    dataset.backgroundColor.push(window.chartColors[colorName]);
                    dataset.data.push(randomScalingFactor());
                });
                window.myPolarArea.update();
            }
        });
        document.getElementById('removeData').addEventListener('click', function () {
            config.data.labels.pop(); // remove the label first
            config.data.datasets.forEach(function (dataset) {
                dataset.backgroundColor.pop();
                dataset.data.pop();
            });
            window.myPolarArea.update();
        });

        function addDataToChart(value){
            if (config.data.datasets.length > 0) {
                config.data.labels.push('data #' + config.data.labels.length);
                config.data.datasets.forEach(function (dataset) {
                    var colorName = colorNames[config.data.labels.length % colorNames.length];
                    dataset.backgroundColor.push(window.chartColors[colorName]);
                    dataset.data.push(value);
                });
                window.myPolarArea.update();
            }
        }
    </script>*@

</body>
</html>
